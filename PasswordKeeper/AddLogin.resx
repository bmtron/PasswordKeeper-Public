<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAANgBAADYAQAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF9L/wBfU/8GXTb0LFsa5XtaFOO3WxXj6loS
        4vxaEOD/WhDh/1oS4vtbFePpWhTjtloY5H5cHeY2WyTqClsh6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF9D/ABfQ/wFX0b9N15A+pNcJezbWhHh+1oP
        4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/WhDh/FoS4eVaFeOlWxrmRl0k7QlcH+kAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGFC/ABdRv0AYET9G19F/IVfQvvlXSnu/1oR
        4f9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aEeHvWhXkmlod
        6CVktP8AWyzvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbQvwAl1z2AF9E/DZfRPy8X0L7/F0p
        7v9aEeH/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP
        4P9aEOD+WhPizVsb5kZSRv8BWSDpAAAAAAAAAAAAAAAAAAAAAAAAAAAAYEH8AFRY+gBeRPxBX0T80l9B
        +/9dKO7/Ww/h/1oO4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP
        4P9aD+D/Wg/g/1oP4P9aD+D/WhPi4lsZ5VFnWP8BXSDpAAAAAAAAAAAAAAAAAF1C/ABgRfwAX0T8N19E
        /NNeRvz/V0Ly/1Qn5P9VIuP/ViDj/1oR4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP
        4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/WhPi4lwb5kZZANcAXS3vAAAAAAAAAAAAX0T8AF9D
        /RxfRPy8X0P8/1xR/P8/q/r/Mq74/zGs+P85lfX/Vx3i/1oN4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP
        4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/WhPizFsd6CZbGuYAAAAAAF9E
        /ABfQ/wEX0T8hl9E/P1fQ/z/XFP8/0TD/v82z/3/LML7/zWm9/9TL+X/Vx7i/1oR4P9aD+D/Wg/g/1oP
        4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aEOD/WxXkmFsn
        7gdbHukAX0T8AF9E/DlfRPzlX0T8/19D/P9cUvz/RcH+/z/a/v83zfz/L7v6/zSp+P86lfX/Vx7i/1oN
        4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP
        4P9aEeHuXBrmRlsX5ABfQ/4FX0T8lF9E/P9fRPz/X0P8/11P/P9Huf7/QNv+/0DY/v83zfz/LML7/zOq
        +P9TL+X/Vx3i/1oR4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP
        4P9aD+D/Wg/g/1oP4P9bFeOmXSrsCl9E/CpfRPzaX0T8/19E/P9fRPz/X0T8/1V0/f9DyP7/QNr+/0DY
        /v83zfz/L7v6/zWl9/86lPT/Vh/i/1oN4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP
        4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oS4eVbHeY2X0T8a19E/PdfRPz/X0T8/19E/P9fRPz/X0T8/1V0
        /f9DyP7/QNv+/0DY/v83zfz/LML7/zKt+P9TLuX/Vxzi/1kS4f9aDuD/Wg/g/1oP4P9aD+D/Wg/g/1oP
        4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/WhDh/VsY5H5fRPylX0T8/19E/P9fRPz/X0T8/19E
        /P9fRPz/X0T8/1V0/f9DyP7/QNv+/0DY/v83zfz/L7v6/zed9v83nvb/RmLt/1kV4f9aC9//Wgzg/1sR
        4P9bDuD/Wgvf/1oN4P9aD+D/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9aD+D/WhXjtl9E/M9fRPz/X0T8/19E
        /P9fRPz/X0T8/19E/P9fRPz/X0T8/1V0/f9DyP7/QNv+/0DY/v83zfz/LMH7/yvA+/8ut/r/SG3u/1Va
        6/9Pd+//TYfy/05+8P9Sae3/WDjm/1oT4f9aDeD/Wg/g/1oP4P9aD+D/Wg/g/1oP4P9bFePpX0T87F9E
        /P9fRPz/X0T8/19E/P9fRPz/X0T8/19E/P9fRPz/X0T8/1V0/f9DyP7/QNv+/0DY/v83zfz/LsD7/zfJ
        /P9B0f3/QtX9/0Dc/v8/3P7/QN3//0Ha/v9Fxvv/UIPx/1kn5P9aDuD/Wg/g/1oP4P9aD+D/Wg/g/1oS
        4vtfRPz6X0T8/19E/P9fRPz/X0T8/19E/P9fRPz/X0T8/19E/P9fRPz/X0T8/1V0/f9DyP7/QNr+/0DY
        /v9L1v3/Rdn+/0Da/v9A2f7/QNn+/0DZ/v9A2f7/QNn+/0Da/v9B2/7/S6T2/1ks5P9aDeD/Wg/g/1oP
        4P9aD+D/WhDh/19E/PpfRPz/X0T8/19E/P9fRPz/X0T8/19E/P9fRPz/X0T8/19E/P9fRPz/X0T8/1V0
        /f9DyP7/Ut7+/3jl//9j4f//Q9r+/0DZ/v9A2f7/QNn+/0DZ/v9A2f7/QNn+/0DZ/v9A2/7/TpX0/1oZ
        4v9aDuD/Wg/g/1oP4P9aEeH/X0T87F9E/P9fRPz/X0T8/19E/P9fRPz/X0T8/19E/P9fRPz/X0T8/19E
        /P9fRPz/X0T8/1h4/f9v2///gej//37n//9j4f//Q9r+/0DZ/v9A2f7/QNn+/0DZ/v9A2f7/QNn+/0Da
        /v9D0v3/VVPq/1oM4P9aD+D/Wg/g/1oT4vtfRPzQX0T8/19E/P9fRPz/X0T8/19E/P9fRPz/X0T8/19E
        /P9fRPz/X0T8/19E/P9fQvz/Z2v9/37c//+A6P//gOf//37n//9i4f//Q9r+/0DZ/v9A2f7/QNn+/0DZ
        /v9A2f7/QNn+/0Dc/v9OkfP/WhTh/1oO4P9aD+D/WxXj6F9E/KZfRPz/X0T8/19E/P9fRPz/X0T8/19E
        /P9fRPz/X0T8/19E/P9fRPz/X0T8/15B/P9tiv3/gOb//4Dn//+A5///gOf//37n//9j4f//Q9r+/z/Z
        /v9A2v7/QNr+/0DZ/v9A2f7/QNv+/0q6+f9ZIuP/Wg7g/1oP4P9bFeO0X0T8a19E/PhfRPz/X0T8/19E
        /P9fRPz/X0T8/19E/P9fRPz/X0T8/19E/P9fRPz/XkH8/2+V/f+B6v//gOf//4Dn//+A5///gOf//37n
        //9j4f//Rdb9/0bC+/9Eyfz/QNn+/0DZ/v9A2/7/RsL7/1gl4/9aDeD/Wxbk+Vwl7HBfRPwqX0T82l9E
        /P9fRPz/X0T8/19E/P9fRPz/X0T8/19E/P9fRPz/X0T8/19E/P9eQfz/bo/9/4Do//+A5///gOf//4Dn
        //+A5///gOj//33g/v9gevD/WCfj/1c85/9Jrvj/QNv+/0Db/v9Ivvr/WSPj/1sW5P9dNPPaX0X8KV5F
        /gVfRPyUX0T8/19E/P9fRPz/X0T8/19E/P9fRPz/X0T8/19E/P9fRPz/X0T8/19C/P9pd/3/f+H//4Do
        //+A5///gOf//4Dn//+A6f//e8v7/18m4/9aDOD/Wwrf/1Jx7/9B3P7/P9z+/0yh9f9bIub/XjX0/19E
        /JNfRf8FX0T8AF9F/DlfRPzlX0T8/19E/P9fRPz/X0T8/19E/P9fRPz/X0T8/19E/P9fRPz/X0P8/2JV
        /P95x/7/gOn//4Dn//+A5///gOf//4Do//991fz/Y0Dn/1kK3/9bEuD/T4ny/0Dc/v9B2P7/VG/x/140
        9P9fRPzkX0T9OF9E/ABeRPwAXUT8BF9E/IdfRPz9X0T8/19E/P9fRPz/X0T8/19E/P9fRPz/X0T8/19E
        /P9fRPz/X0P8/22H/f9/4v//gOj//4Dn//+A5///gOf//4Dn//94ufj/bHPu/2+J8v9i0v3/Q93+/0q2
        +/9dTPj/X0P8/V9E/IVcQvwEXkP8AAAAAABfRPwAX0T9HF9E/L1fRPz/X0T8/19E/P9fRPz/X0T8/19E
        /P9fRPz/X0T8/19E/P9fQ/z/YUz8/3Ki/v9/5f//gOj//4Dn//+A5///gOf//4Dp//+A6P//ger//37p
        //9jyP7/Wmz7/19D/P9fRPy9YET9HF9E/AAAAAAAAAAAAGFG/ABeQ/wAX0T8N19E/NNfRPz/X0T8/19E
        /P9fRPz/X0T8/19E/P9fRPz/X0T8/19E/P9fQ/z/YU78/2+V/f991v//gOj//4Dp//+A6f//gOn//4Hq
        //9/4v//d7j+/2Zo/f9fQ/z/X0T81F9E/DdfQ/wAX0b8AAAAAAAAAAAAAAAAAF5G/ABmNPkAXkT8Ql9E
        /NRfRPz/X0T8/19E/P9fRPz/X0T8/19E/P9fRPz/X0T8/19E/P9fQ/z/X0b8/2Zm/f9wl/7/drf+/3nD
        /v94vv7/c6f+/2p8/f9hT/z/X0P8/19E/NNfRPxCV1T5AGBC/AAAAAAAAAAAAAAAAAAAAAAAAAAAAGFH
        /ACyy/8AX0T8N19E/LxfRPz9X0T8/19E/P9fRPz/X0T8/19E/P9fRPz/X0T8/19E/P9fRPz/X0L8/19E
        /P9hTPz/YVD8/2FO/P9gR/z/X0L8/19D/P1fRPy+YEX8N0v//wBfR/wAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAF1G/ABfQ/0AXkX9HF9E/IZfRPzlX0T8/19E/P9fRPz/X0T8/19E/P9fRPz/X0T8/19E
        /P9fRPz/X0T8/19D/P9fQ/z/X0P8/19E/P9fRPzmX0T8iV9E/RxcR/0AYUL8AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgRPwAYEX9BV9E/DhfRPyUX0T8219E/PhfRPz/X0T8/19E
        /P9fRPz/X0T8/19E/P9fRPz/X0T8/19E/PhfRPzbX0T8lF9E/DhdRv0GXkX9AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAX0T8AF9E/QZfRPsqX0T8a19E
        /KVfRPzQX0T87F9E/PpfRPz6X0T87F9E/NBfRPylX0T8a19E+ypfRP0GX0T8AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4AB//4AAH/8AAA/+AAAD/AAAAfgAAAHwAAAA4AAAAGAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAAcAA
        AAPgAAAH8AAAD/gAAB/8AAA//gAAf/+AAf8=
</value>
  </data>
</root>